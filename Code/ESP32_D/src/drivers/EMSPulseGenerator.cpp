#include <Arduino.h>

#include ".\app\pins.h"
#include "..\include\drivers\EMSPulseGenerator.h"

// ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è —Å—Ç–∏–º—É–ª—è—Ü–∏–∏ ======
//static const int PWM1_CH      = 0;     // ledc –∫–∞–Ω–∞–ª
static const int PWM1_RES     = 10;    // 10 –±–∏—Ç (0..1023)
//static const int PWM1_FREQ    = 144;  // –Ω–µ—Å—É—â–∞—è –¥–ª—è –®–ò–ú –∞–º–ø–ª–∏—Ç—É–¥—ã



// üî• –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
EMSPulseGenerator::EMSPulseGenerator(uint8_t pwmChannel, 
                                     uint8_t outputPin,
                                     uint32_t pwmFreq, 
                                     uint8_t pwmResolution,
                                     uint8_t pwmDuty
                                    )
    : pwmChannel_(pwmChannel),
      outputPin_(outputPin),
      pwmFreq_(pwmFreq),
      pwmResolution_(pwmResolution),
      pwmDuty_(pwmDuty)
{
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ duty cycle
    maxDuty_ = (1 << pwmResolution_) - 1;  // 2^resolution - 1
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    amp_ = 10;
    pwUs_ = 200;
    rateHz_ = 144;
    pulsesPerBurst_ = 26;
    pauseBetweenBurstsMs_ = 235;
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    pulsePeriodUs_ = 1000000UL / rateHz_;  // 6944 –º–∫—Å
    burstDurationUs_ = pulsesPerBurst_ * pulsePeriodUs_;  // 180556 –º–∫—Å
    pauseDurationUs_ = pauseBetweenBurstsMs_ * 1000UL;    // 235000 –º–∫—Å
    fullCycleUs_ = burstDurationUs_ + pauseDurationUs_;   // 415556 –º–∫—Å
    
    //pwmDuty_ = map(amp_, 0, 100, 0, maxDuty_);
   // pwmDutypwmDuty_ = 70;
    
    Serial.printf("[EMS] Constructor: CH=%d, Pin=%d, Freq=%lu Hz, Res=%d bit (max duty=%d)\n",
                  pwmChannel_, outputPin_, pwmFreq_, pwmResolution_, maxDuty_);
}

EMSPulseGenerator::EMSPulseGenerator() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    amp_ = 10;
    pwUs_ = 200;
    rateHz_ = 144;
    pulsesPerBurst_ = 26;
    pauseBetweenBurstsMs_ = 235;
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    pulsePeriodUs_ = 1000000UL / rateHz_;  // 6944 –º–∫—Å
    burstDurationUs_ = pulsesPerBurst_ * pulsePeriodUs_;  // 180556 –º–∫—Å
    pauseDurationUs_ = pauseBetweenBurstsMs_ * 1000UL;    // 235000 –º–∫—Å
    fullCycleUs_ = burstDurationUs_ + pauseDurationUs_;   // 415556 –º–∫—Å
    
    //pwmDuty_ = map(amp_, 0, 100, 0, 1023);

   // pwmDuty_ = 6;
}

bool EMSPulseGenerator::begin() {

    // üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LEDC –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    ledcSetup(pwmChannel_, pwmFreq_, pwmResolution_);
    ledcAttachPin(outputPin_, pwmChannel_);
    ledcWrite(pwmChannel_, 0);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    lastPulseTs_ = micros();
    burstStartTs_ = lastPulseTs_;
    cycleStartTs_ = lastPulseTs_;
    running_ = false;
    
    Serial.println("[EMS] Initialized with parameters:");
    Serial.printf("  Pulse rate: %d Hz\n", pwmFreq_);
    Serial.printf("  Pulse Duty: %d\n", pwmDuty_);

    return true;
}

void EMSPulseGenerator::start() {
    running_ = true;
    // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    uint32_t now = micros();
    lastPulseTs_ = now;
    burstStartTs_ = now;
    cycleStartTs_ = now;
    nextPulseTs_ = now;  // ‚úÖ –ù–û–í–û–ï: —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–º–ø—É–ª—å—Å–∞
    pulseActive_ = false;
    pulseCountInBurst_ = 0;
    inBurst_ = true;
    
    Serial.printf("[EMS CH%d] ‚úÖ Started on pin %d\n", pwmChannel_, outputPin_);
}

void EMSPulseGenerator::stop() {
    running_ = false;
    pulseActive_ = false;
    inBurst_ = false;
    
    // üî• –í—ã–∫–ª—é—á–∞–µ–º PWM —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    ledcWrite(pwmChannel_, 0);
    
    Serial.printf("[EMS CH%d] ‚õî Stopped\n", pwmChannel_);
}

void EMSPulseGenerator::setParams(uint8_t amplitudePercent) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∞–º–ø–ª–∏—Ç—É–¥—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞
    amp_   = constrain(amplitudePercent, 0, 100);
    //pwUs_  = constrain(pulseWidthUs, 50, 500);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–º–ø–ª–∏—Ç—É–¥—ã –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –®–ò–ú (0..1023)
    pwmDuty_ = map(amp_, 0, 100, 0, (1 << PWM1_RES) - 1);
    if (amp_ <= 0) pwmDuty_ = 0;

    

    Serial.printf("income = %d , pwmDuty_ = %d ", amplitudePercent, pwmDuty_);
    // ‚ùå –£–ë–†–ê–õ–ò Serial.printf –æ—Ç—Å—é–¥–∞ - –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ!
}

void EMSPulseGenerator::update() {
    if (!running_) return;

    const uint32_t now = micros();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ
    const uint32_t cycleElapsed = now - cycleStartTs_;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    //fullCycleUs_ = 415556;     // 180556 + 235000 = 415556 –º–∫—Å
    if (cycleElapsed >= fullCycleUs_) {
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
        cycleStartTs_ = now;
        burstStartTs_ = now;
        nextPulseTs_ = now;
        pulseCountInBurst_ = 0;
        inBurst_ = true;
        pulseActive_ = false;
        ledcWrite(pwmChannel_, 0);
       // digitalWrite(PWM_STATE_PIN, LOW);
        
       // Serial.printf("[EMS] üîÑ New cycle at %lu ¬µs\n", now);
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø–∞—á–∫–µ –∏–ª–∏ –≤ –ø–∞—É–∑–µ
    const uint32_t burstElapsed = now - burstStartTs_;
    
    //burstDurationUs_ = 180556; // 26 √ó 6944 = 180556 –º–∫—Å
    if (burstElapsed >= burstDurationUs_) {
        // –ú—ã –≤ –ø–∞—É–∑–µ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
        if (inBurst_) {
            inBurst_ = false;
            pulseActive_ = false;
            ledcWrite(pwmChannel_, 0);
            //digitalWrite(PWM_STATE_PIN, LOW);
           // Serial.printf("[EMS] üí§ Pause (sent %d pulses)\n", pulseCountInBurst_);
        }
        else{
          
        }
        return;
    }
    
    // –ú—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞—á–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤
    // if (pulseCountInBurst_ >= pulsesPerBurst_) {
    //     // –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏–º–ø—É–ª—å—Å–æ–≤ –≤ –ø–∞—á–∫–µ
    //     if (inBurst_) {
    //         inBurst_ = false;
    //         pulseActive_ = false;
    //         ledcWrite(PWM1_CH, 0);
    //         //digitalWrite(PWM_STATE_PIN, LOW);
    //         //Serial.printf("[EMS] ‚úÖ Burst complete (%d pulses)\n", pulseCountInBurst_);
    //     }
    //     else{
    //       //digitalWrite(PWM_STATE_PIN, HIGH);
          
    //     }
    //     return;
    // }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞
    if (!pulseActive_) {
        // ‚úÖ –ñ–¥–µ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–º–ø—É–ª—å—Å–∞
        //if (now >= nextPulseTs_) {
            // ‚úÖ –ù–ê–ß–ò–ù–ê–ï–ú –ù–û–í–´–ô –ò–ú–ü–£–õ–¨–° - –û–î–ò–ù –†–ê–ó!
            pulseActive_ = true;
            pulseCountInBurst_++;
            lastPulseTs_ = now;
            nextPulseTs_ += pulsePeriodUs_;  // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–º–ø—É–ª—å—Å
            
            // ‚úÖ –í–∫–ª—é—á–∞–µ–º PWM - –û–î–ò–ù –†–ê–ó!
            ledcWrite(pwmChannel_, pwmDuty_);
            //digitalWrite(PWM_STATE_PIN, HIGH);

            //digitalWrite(PWM_STATE_PIN, !digitalRead(PWM_STATE_PIN));  // Toggle
            
            // –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–≤—ã—Ö 3 –∏–º–ø—É–ª—å—Å–æ–≤
            // if (pulseCountInBurst_ <= 3) {
            //     Serial.printf("[EMS] Pulse #%d START at %lu ¬µs (next: %lu ¬µs)\n", 
            //                   pulseCountInBurst_, now, nextPulseTs_);
            // }
        //}
        // ‚úÖ –ï—Å–ª–∏ now < nextPulseTs_, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    } else {
        // ‚úÖ –ò–ú–ü–£–õ–¨–° –£–ñ–ï –ê–ö–¢–ò–í–ï–ù - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ—Ä–∞ –ª–∏ –µ–≥–æ –≤—ã–∫–ª—é—á–∏—Ç—å
        const uint32_t sincePulse = now - lastPulseTs_;
        //if (sincePulse >= pwUs_) {
            // ‚úÖ –í–´–ö–õ–Æ–ß–ê–ï–ú –ò–ú–ü–£–õ–¨–° - –û–î–ò–ù –†–ê–ó!
        //    pulseActive_ = false;
        //    ledcWrite(PWM1_CH, 0);
            // digitalWrite –¥–ª—è toggle –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            
            // –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–≤—ã—Ö 3 –∏–º–ø—É–ª—å—Å–æ–≤
            // if (pulseCountInBurst_ <= 3) {
            //     Serial.printf("[EMS] Pulse #%d END at %lu ¬µs (duration: %lu ¬µs)\n", 
            //                   pulseCountInBurst_, now, sincePulse);
           // }
       // }
        // ‚úÖ –ï—Å–ª–∏ sincePulse < pwUs_, –∏–º–ø—É–ª—å—Å –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }
}