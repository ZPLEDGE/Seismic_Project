#pragma once
#include <Arduino.h>

#include  ".\core\IStimGenerator.h"

class EMSPulseGenerator : public IStimGenerator {
public:

    //using PulseCallback = std::function<void(uint16_t pulseNumber, uint32_t timestamp)>;
    //void onPulseEnd(PulseCallback callback) { pulseEndCallback_ = callback; }

        // üî• –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ PWM –∫–∞–Ω–∞–ª–∞, —á–∞—Å—Ç–æ—Ç—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    EMSPulseGenerator(uint8_t pwmChannel, 
                     uint8_t outputPin,
                     uint32_t pwmFreq = 144, 
                     uint8_t pwmResolution = 10,
                    uint8_t  pwmDuty = 70);

    EMSPulseGenerator();
    
    bool begin() override;
    void start() override;
    void stop() override;

    void setParams(uint8_t amplitudePercent,
                 uint16_t pulseWidthUs,
                 uint8_t rateHz,
                 float burstHz,
                 uint8_t burstDutyPercent) override;

    void update() override;

private:

    // üî• PWM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞)
    uint8_t  pwmChannel_;      // LEDC –∫–∞–Ω–∞–ª (0-15)
    uint8_t  outputPin_;       // GPIO –ø–∏–Ω
    uint32_t pwmFreq_;         // –ß–∞—Å—Ç–æ—Ç–∞ PWM (–ì—Ü)
    uint8_t  pwmResolution_;   // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ PWM (–±–∏—Ç)
    uint16_t maxDuty_;         // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ duty cycle (2^pwmResolution - 1)


    uint8_t  amp_ = 10;          // % (–Ω–∞—á–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ 10%)
    uint16_t pwUs_ = 200;        // –º–∏–∫—Ä–æ—Å–µ–∫ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞)
    uint8_t  rateHz_ = 144;      // –ì—Ü (—á–∞—Å—Ç–æ—Ç–∞ –∏–º–ø—É–ª—å—Å–æ–≤ –≤ –ø–∞—á–∫–µ)
    uint8_t  pulsesPerBurst_ = 26;  // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤ –≤ –ø–∞—á–∫–µ
    uint32_t pauseBetweenBurstsMs_ = 235;  // –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ –≤ –º—Å


    // –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    uint32_t pulsePeriodUs_ = 6944;     // 1/144 –ì—Ü = 6944 –º–∫—Å
    uint32_t burstDurationUs_ = 180556; // 26 √ó 6944 = 180556 –º–∫—Å
    uint32_t pauseDurationUs_ = 235000; // 235 –º—Å = 235000 –º–∫—Å
    uint32_t fullCycleUs_ = 415556;     // 180556 + 235000 = 415556 –º–∫—Å
    uint16_t pwmDuty_ = 0;              // 0..1023

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    bool     running_ = false;
    bool     pulseActive_ = false;
    uint32_t lastPulseTs_ = 0;
    uint32_t nextPulseTs_ = 0;
    uint32_t burstStartTs_ = 0;
    uint32_t cycleStartTs_ = 0;
    uint16_t pulseCountInBurst_ = 0;
    bool     inBurst_ = false;
};

